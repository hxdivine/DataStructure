分治算法
/**********************************************************************************/

分治算法是一种很重要的算法，字面上的解释是“分而治之”，就是把一个复杂
的问题分成两个或更多的相同或相似的子问题，再把子问题粉坊更小的子问题，
直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并，这个
技巧是很多高效算法的基础，如快速排序，归并排序

分治算法可以求解的一些经典问题
 二分搜索
 大整数乘法
 棋盘覆盖
 合并排序
 快速排序
 线性时间选择
 最接近点对问题
 循环赛日程表
 汉诺塔
/**********************************************************************************/
分治算法的三个步骤

1. 分解： 将原问题分解为若干个规模小，互相独立，与原问题形式相同的子问题

2. 解决： 若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题

3. 合并： 将子问题的解合并为原问题的解
/**********************************************************************************/
分治算法最佳案例 -- 汉诺塔

1. 如果只有一个盘， A-> C

如果我们有n>=2情况，我们总是可以看作是两个盘 1. 最下面的盘 2. 上面的盘

1. 先把最上面 A->B

2. 把下边的盘 A->C

3. 把B塔的所有盘从 B->C
/**********************************************************************************/

/**
 * 汉诺塔移动方法
 * @param num 盘数
 * @param a 第一个塔
 * @param b 辅助塔
 * @param c 目标塔
*/
public static void hanoiTower(int num,char a,char b,char c){
	if(num == 1){
		System.out.println("第1个盘从" + a + "->" + c);
	}else{
		//1. 先把最上面 A->B
		hanoiTower(num - 1, a, c, b);
		//2. 把下边的盘 A->C
		System.out.println("第" + num + "个盘从" + a + "->" + c);
		//3. 把B塔的所有盘从 B->C
		hanoiTower(num - 1, b,a,c);
	}
}

/**********************************************************************************/