链表

1）链表是以节点的方式来存储，是链式存储

2）每个节点包含data域 next域

3）链表的各个节点并不是连续存储

4）链表分带头节点 和不带头节点，根据实际的需求来确定

/*
		 * 反转
		 */
		public static HeroDemo ReverseLink(HeroDemo head) {
			if(head.next == null || head.next.next == null) {
				return head;
			}
			
			HeroDemo cur = head.next;
			HeroDemo next = null;
			HeroDemo ReverseHead = new HeroDemo(0,"");
			
			while(cur != null) {
				
				next = cur.next;
				cur.next = ReverseHead.next;
				ReverseHead.next = cur;
				cur = next;
			}
			head.next = ReverseHead.next;
			return head;
			
		}

链表从尾部开始输出 可以使用栈实现
/*
		 * 链表从尾部开始输出 可以使用栈实现
		 * 另一种方法使用反转 但是改变了原来头节点
		 */
		public void lastPrint() {
			
			if(head.next == null) {
				System.out.println("------head empty----------");
				return;
			}
			
			HeroDemo temp = head.next;
			Stack<HeroDemo> stack = new Stack<HeroDemo>();
			
			while(temp != null) {
				
				stack.push(temp);
				temp = temp.next;
			}
			
			while(stack.size() > 0) {
				System.out.println(stack.pop());
			}
		}

代码演示
/*
**   while中是重点
*/
class ArrayLink{
		
		private HeroDemo head = new HeroDemo(0,"");
		
		public void add(HeroDemo hero) {
			
			HeroDemo temp = head;
			
			while(true) {
				
				if(temp.next == null) {
					temp.next = hero;
					break;
				}
				temp = temp.next;
			}
		}
		
		public void addList(HeroDemo hero) {
			
			HeroDemo temp = head;
			boolean flag = false;
			
			while(true) {
				
				if(temp.next == null) {
					break;
				}else if(temp.next.no > hero.no) {
					break;
				}else if(temp.next.no == hero.no) {
					flag = true;
				}
				temp = temp.next;
			}
			
			if(flag) {
				System.out.println("数据已存在");
				return;
			}
			hero.next = temp.next;
			temp.next = hero;
		}
		
		public void list() {
			
			HeroDemo temp = head.next;
			if(temp == null) {
				System.out.println("链表为空");
			}
			while(temp != null) {
				
				System.out.println(temp);
				temp = temp.next;
			}
		}
	}
	
	class HeroDemo{
		
		public int no;
		
		public String name;
		
		public HeroDemo next;
		
		public HeroDemo(int no,String name) {
			this.no = no;
			this.name = name;
			this.next = null;
		}

		@Override
		public String toString() {
			return "HeroDemo [no=" + no + ", name=" + name + "]";
		}
		
	}
