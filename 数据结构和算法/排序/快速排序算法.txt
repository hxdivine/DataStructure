快速排序  QuickSort
快速排序是对冒泡排序的一种改进

/********************************************************************************/
基本思想
通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后按此方法对这两部分数据分别进行快速paix，整个算法可以递归执行

int[] arr = {-9,78,55,0,-15,-66,54};
[-9, -66, -15, 0, 55, 78, 54]
[-66, -9, -15, 0, 55, 78, 54]
[-66, -15, -9, 0, 55, 78, 54]
[-66, -15, -9, 0, 55, 54, 78]
[-66, -15, -9, 0, 54, 55, 78]
/********************************************************************************/
public static void quickSort(int[] arr,int left,int right) {
	int l = left;
	int r = right;
	int temp = 0;
	//中间值
	int pivot = arr[(l + r) / 2];
	//while循环目的是让pivot小的放到左边，大的放到右边
	while( l < r) {
		//左边找到大于pivot的值
		while(arr[l] < pivot) {
			l += 1;
		}
		//右边找到小于pivot的值
		while(arr[r] > pivot) {
			r -= 1;
		}
		//如果l 》= r说明pivot的左右两边的值，已经全部小于或大于pivot
		if(l >= r) {
			break;
		}
		temp = arr[l];
		arr[l] = arr[r];
		arr[r] = temp;
				
		if(arr[r] == pivot) {
			l += 1;
		}
		if(arr[l] == pivot) {
			r -=1;
		}
	}
	System.out.println(Arrays.toString(arr));
	if(l == r) {
		l += 1;
		r -= 1;
	}
	if(left < r) {
		quickSort(arr,left,r);
	}
	if(right > l) {
		quickSort(arr,l,right);
	}
		
}
	
/********************************************************************************/