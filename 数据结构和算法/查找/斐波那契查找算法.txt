斐波那契查找算法 又叫黄金分割法

黄金分隔值0.618
斐波那契数列{1，1，2，3，5，8，13，21，34，55}无限接近黄金分割
/************************************************************/
算法原理：
与二分查找相似，仅仅改变了中间结点mid的位置，mid不再是中间或插值得到，而是位于黄金分割点附近，即mid = low+F【k-1】-1 

对F【k-1】-1 理解

1）由斐波那契数列F【k】=F【k-1】+F【k-2】的性质，可以得到
F【k】-1=F【k-1】-1+F【k-2】-1 +1 该式表明只要顺序表长度满足F【k】-1则可以拆分成FF【k-1】-1 和F【k-2】-1的两段

2）类似的，每一字段也可以用相同的方式分割
/************************************************************/
/**
 * 
 * 需要先得到一个斐波那契数列
* @return
*/
public static int[] fib(){
	int[] f =new int[maxSize];
	f[0] = 1;
	f[1] = 1;
	for(int i = 2; i < maxSize; i++){
		f[i] = f[i-1] + f[i-2];
	}
	return f;
}
/**
 * 查找算法
 */
public static int fibSearch(int[] a,int key){
	int low = 0;
	int high = a.length - 1;
	int k = 0;//斐波那契分割数据的下标
	int mid = 0;
	int f[] = fib();
	//获取分割数组下标
	while(high > f[k] - 1){
		k++;
	}
	//因为f[k]值可能大于a的长度，因此需要使用Arrays类，构造一个新的数组，并指向a[]
	int[] temp = Arrays.copyOf(a, f[k]);
				
	for(int i = high + 1; i < temp.length; i++){
		temp[i] = a[high];
	}
		
	while(low <= high){
		mid = low + f[k - 1] - 1;
		if(key < temp[mid]){
			high = mid - 1;
			k--;
		}else if(key > temp[mid]){
			low = mid + 1;
			k -= 2;
		}else{
			if(mid <= high){
				return mid;
			}else{
				return high;
			}
		}
	}
	return -1;
}
/************************************************************/